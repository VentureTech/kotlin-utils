import org.ajoberstar.grgit.Grgit

compileKotlin {
    kotlinOptions {
        apiVersion = "1.3"
        languageVersion = "1.3"
        javaParameters = true
        jvmTarget = "1.8"
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:all,-deprecation,-processing'
    options.compilerArgs << '-parameters'
    options.incremental = true
}
compileTestJava { options.incremental = true }


dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    
    // Scripting
//    https://youtrack.jetbrains.com/issue/KT-30986
    // Including dependency resolution in case packaging changes in the future
    implementation "org.jetbrains.kotlin:kotlin-script-util:$kotlin_version"
    //+--- org.jetbrains.kotlin:kotlin-script-util:1.3.31
    //|    +--- org.jetbrains.kotlin:kotlin-stdlib:1.3.31 (*)
    //|    +--- org.jetbrains.kotlin:kotlin-script-runtime:1.3.31
    //|    +--- org.jetbrains.kotlin:kotlin-scripting-jvm:1.3.31
    //|    |    +--- org.jetbrains.kotlin:kotlin-script-runtime:1.3.31
    //|    |    +--- org.jetbrains.kotlin:kotlin-stdlib:1.3.31 (*)
    //|    |    \--- org.jetbrains.kotlin:kotlin-scripting-common:1.3.31
    //|    |         +--- org.jetbrains.kotlin:kotlin-stdlib:1.3.31 (*)
    //|    |         +--- org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.1
    //|    |         \--- org.jetbrains.kotlin:kotlin-reflect:1.3.31 (*)
    //|    +--- org.jetbrains.intellij.deps:trove4j:1.0.20181211
    //|    \--- org.jetbrains.kotlin:kotlin-daemon-client:1.3.31
    implementation "org.jetbrains.kotlin:kotlin-scripting-jvm-host-embeddable:$kotlin_version"
    //+--- org.jetbrains.kotlin:kotlin-scripting-jvm-host-embeddable:1.3.31
    //|    +--- org.jetbrains.kotlin:kotlin-script-runtime:1.3.31
    //|    +--- org.jetbrains.kotlin:kotlin-stdlib:1.3.31 (*)
    //|    +--- org.jetbrains.kotlin:kotlin-scripting-common:1.3.31 (*)
    //|    +--- org.jetbrains.kotlin:kotlin-scripting-jvm:1.3.31 (*)
    //|    +--- org.jetbrains.kotlin:kotlin-script-util:1.3.31 (*)
    //|    +--- org.jetbrains.kotlin:kotlin-compiler-embeddable:1.3.31
    //|    |    +--- org.jetbrains.kotlin:kotlin-stdlib:1.3.31 (*)
    //|    |    +--- org.jetbrains.kotlin:kotlin-script-runtime:1.3.31
    //|    |    +--- org.jetbrains.kotlin:kotlin-reflect:1.3.31 (*)
    //|    |    \--- org.jetbrains.intellij.deps:trove4j:1.0.20181211
    //|    \--- org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:1.3.31
    

    testCompile 'org.testng:testng:6.8.13'
    testCompile 'junit:junit:4.11'
    testCompile('org.uncommons:reportng:1.1.2') {
        exclude group: "org.testng", module: "testng"
    }
    testRuntime 'com.google.inject:guice:4.0'
    testCompile 'org.jetbrains.spek:spek-api:1.0.89'
    testRuntime 'org.jetbrains.spek:spek-junit-platform-engine:1.0.89'
    
}


def canBeResolved(configuration){
    configuration.metaClass.respondsTo(configuration, "isCanBeResolved") ?
        configuration.isCanBeResolved() : true
}
def createDependencyFile() {
    def dependencyFile = file("dependencies.txt")
    def pw = dependencyFile.newPrintWriter()
    configurations.all.collect {
        if(canBeResolved(it)) it.resolvedConfiguration.getResolvedArtifacts()
        else []
    }.flatten().collect {it.moduleVersion.id}.unique().sort(false){"${it.group}:${it.name}"}forEach{pw.println(it)}
    pw.close()
    try{
        def root = file('../.git').exists() ? file('..') : file('.')
        def grgit = Grgit.open(dir: root)
        def path = root == project.rootDir ? dependencyFile.name : "${project.rootDir.name}/${dependencyFile.name}"
        if(isIDEA)
            grgit.add(patterns: [path] as Set, update: false)
        else
            grgit.commit(message: 'Updating dependencies.txt', paths: [path] as Set)

    }catch(ignore){
        if(!ignore.message.toLowerCase().contains("no changes"))
            ignore.printStackTrace()
    }
}

tasks.register("createDependencyFile") {
    group = 'Build'
    doFirst {
        createDependencyFile()
    }
}
if(isIDEA) {
    afterEvaluate {
        try
        {
             createDependencyFile()
        } catch(e) {
            e.printStackTrace()
        }
    }
}