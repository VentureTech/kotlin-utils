/*
 * Copyright (c) 2019 Interactive Information Research & Development
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

compileKotlin {
    kotlinOptions {
        //explicitApiWarning()
        apiVersion = "1.6"
        languageVersion = "1.6"
        javaParameters = true
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        //explicitApiWarning()
        apiVersion = "1.6"
        languageVersion = "1.6"
        javaParameters = true
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version_kotlin"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$version_kotlin"

    implementation("com.squareup.moshi:moshi:1.15.0")
    implementation("com.squareup.moshi:moshi-adapters:1.15.0")
    implementation('com.squareup.moshi:moshi-kotlin:1.15.0')

    testImplementation(platform('org.junit:junit-bom:5.9.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testImplementation("com.winterbe:expekt:0.5.0")
    testImplementation 'org.spekframework.spek2:spek-dsl-jvm:2.0.19'
    testRuntimeOnly 'org.spekframework.spek2:spek-runner-junit5:2.0.19'
    testImplementation("org.mockito:mockito-core:2.1.0-beta.119")

    // For Intellij Jenkinsfile editing
    compileOnly 'org.codehaus.groovy:groovy:3.0.8'
}

String createDependencyFile(String configurationName) {
    def suffix = configurationName.toLowerCase().replaceAll('runtime.*', '')
    if (!suffix.isEmpty()) suffix = "-${suffix}"
    def fileName = "dependencies${suffix}.txt" as String
    def dependencyFile = file(fileName)
    configurations.named(configurationName) {
        def pw = dependencyFile.newPrintWriter()
        it.resolvedConfiguration.getResolvedArtifacts()
            .collect {it.moduleVersion.id}
            .unique()
            .sort(false) {"${it.group}:${it.name}"}
            .forEach {pw.append(it.toString()).append('\n')}
        pw.close()
    }
    return fileName
}

def createDependencyFiles() {
    createDependencyFile('runtimeClasspath')
    createDependencyFile('testRuntimeClasspath')
    //    createDependencyFile('providedRuntime')
}

tasks.register("createDependencyFiles") {
    group = 'Build'
    doFirst {
        createDependencyFiles()
    }
}
if (isIDEA && refreshDependenciesFile) {
    afterEvaluate {
        try {
            def start = System.currentTimeMillis()
            createDependencyFiles()
            println("Took ${System.currentTimeMillis() - start}ms creating dependency files")
        } catch (e) {
            e.printStackTrace()
        }
    }
}

// https://docs.gradle.org/current/userguide/dependency_locking.html
//dependencyLocking {
//    lockAllConfigurations()
//}
