/*
 * Copyright (c) 2019 Interactive Information Research & Development
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import com.proteusframework.build.Version

plugins {
    id 'org.jetbrains.kotlin.jvm' version "${version_kotlin}"

    id 'maven-publish'
    id "org.cyclonedx.bom" version "1.7.3"

    id 'idea'

    id("com.jfrog.artifactory") version "4.21.0"

    // This plugin is for Windows users - https://plugins.gradle.org/plugin/com.github.ManifestClasspath
    // Uncomment as needed
    //    id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
}


project.ext.ci_server = project.hasProperty("CI") || Boolean.getBoolean("CI")
println("Is a CI server? ${ci_server}")

repositories {
//    mavenLocal()
    maven {
        url repoReleaseURL
        credentials {
            username repo_venturetech_username
            password repo_venturetech_password
        }
        authentication {
            basic(BasicAuthentication)
        }
    }
    maven {
        url repoSnapshotURL
        credentials {
            username repo_venturetech_username
            password repo_venturetech_password
        }
        authentication {
            basic(BasicAuthentication)
        }
    }
}

description = "${app_description}"
sourceCompatibility = 1.8
targetCompatibility = 1.8
version = new Version(app_version, project)
group = app_group
ext[Version.PROJECT_INFORMATION_PACKAGE] = 'net.proteusframework.kotlinutils.config'

afterEvaluate {
    println "Project: $app_name $version"
    // Check required properties
    def props = [
        new com.proteusframework.build.Property(name:'repo_venturetech_username',
            description:'Username to access the artifact repository'),
        new com.proteusframework.build.Property(name:'repo_venturetech_password',
            description:'Password to access the artifact repository'),
        new com.proteusframework.build.Property(name:'publish_venturetech_username',
            description:'Username to upload to the artifact repository', required:false),
        new com.proteusframework.build.Property(name:'publish_venturetech_password',
            description:'Password to upload to the artifact repository', required:false),
    ]
    props.forEach({it.test(rootProject)})

}

apply from: 'gradle/dependencies.gradle'
apply from: 'gradle/tests.gradle'
apply from: 'gradle/artifacts.gradle'
apply from: 'gradle/publishing.gradle'

normalization {
    // https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:configure_input_normalization
    // https://docs.gradle.org/current/javadoc/org/gradle/normalization/RuntimeClasspathNormalization.html
    runtimeClasspath {
        ignore '**/net/proteusframework/kotlinutils/config/ProjectInformation.*'
        ignore '**/dependencies*.txt'
    }
}

//tasks.register('generateProjectInformation') {
//    version.generateProjectInformationClass(Version.Lang.Kotlin)
//}
//
//tasks.named("classes") {
//    it.dependsOn(generateProjectInformation)
//}

tasks.named("cyclonedxBom").configure {
    includeConfigs = ["runtimeClasspath"]
    // skipConfigs is a list of configuration names to exclude when generating the BOM
    skipConfigs = ["compileClasspath", "testCompileClasspath"]
}

def matchDetails(DependencyResolveDetails details, String groupAndArtifact) {
    def split = groupAndArtifact.split(':')
    def group = split[0]
    def artifact = split[1]
    return details.requested.group == group && details.requested.name == artifact
}

//noinspection GroovyAssignabilityCheck
configurations.configureEach {
    resolutionStrategy {
        // cache dynamic versions for ...
//        cacheDynamicVersionsFor 0, 'seconds'
        // cache changing modules (SNAPSHOT) for ...
//        cacheChangingModulesFor 300, 'seconds'
    }
}

idea {
    module {
        generatedSourceDirs += file('build/generated/source/kapt/main')
        generatedSourceDirs += file('build/generated/source/kapt/test')
    }
}
