/*
 * Copyright (c) 2019 Interactive Information Research & Development
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

pluginManagement {
    repositories {
        gradlePluginPortal()
    }
}
settings.rootProject.name = "${app_name}"

settings.gradle.projectsLoaded( {
    def properties = System.getProperties()
    def runningIDEA = properties.containsKey('idea.active') ||
        properties.containsKey('idea.paths.selector') ||
        plugins.any({it.class.name == 'JetGradlePlugin'})
    def buildingWar = gradle.startParameter.taskNames.any {
        it == 'war' || it == 'aP' || it == 'artifactoryPublish' || it == 'pTML' || it == 'publishToMavenLocal'
    }
    def refreshDependenciesFile = gradle.startParameter.allInitScripts.any { file ->
        file.absolutePath.endsWith("ijinit.gradle")
    } && gradle.startParameter.taskNames.isEmpty()

    settings.gradle.rootProject.ext.refreshDependenciesFile = refreshDependenciesFile
    settings.gradle.rootProject.ext.isIDEA = runningIDEA
    settings.gradle.rootProject.ext.warTaskSpecified = buildingWar
    settings.gradle.rootProject.ext.compileLibraries = settings.hasProperty('compile_libraries') ||
        settings.gradle.rootProject.ext.isIDEA
})

